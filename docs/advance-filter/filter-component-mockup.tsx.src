import React, { useState, useEffect } from 'react';
import { 
  Button, 
  Card, 
  CardContent, 
  CardFooter, 
  CardHeader, 
  CardTitle,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Input,
  Badge,
  Popover,
  PopoverContent,
  PopoverTrigger,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
  ScrollArea
} from '@/components/ui';
import { ChevronDown, Plus, Save, X, Filter, Share2, Star, History, Code } from 'lucide-react';

// Define types for our filter system
type FilterOperator = 'equals' | 'contains' | 'in' | 'between' | 'greaterThan' | 'lessThan';
type LogicalOperator = 'AND' | 'OR';

interface FilterType {
  field: string;
  operator: FilterOperator;
  value: any;
  logicalOperator?: LogicalOperator;
}

interface SavedFilter {
  id: string;
  name: string;
  filters: FilterType[];
  isDefault?: boolean;
  createdAt: string;
  updatedAt: string;
}

const AdvancedFilterMockup = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [activeTab, setActiveTab] = useState('build');
  const [activeFilters, setActiveFilters] = useState<FilterType[]>([
    { field: 'createdDate', operator: 'between', value: ['2023-01-01', '2023-03-31'] },
    { field: 'status', operator: 'in', value: ['active', 'pending'], logicalOperator: 'AND' }
  ]);

  const [savedFilters, setSavedFilters] = useState<SavedFilter[]>([
    { 
      id: '1', 
      name: 'Recent Active Orders', 
      isDefault: true,
      filters: [{ field: 'status', operator: 'equals', value: 'active' }],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    { 
      id: '2', 
      name: 'High-Value Pending Items', 
      isDefault: false,
      filters: [
        { field: 'status', operator: 'equals', value: 'pending' },
        { field: 'amount', operator: 'greaterThan', value: 1000, logicalOperator: 'AND' }
      ],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    { 
      id: '3', 
      name: 'Q1 Transactions', 
      isDefault: true,
      filters: [{ field: 'createdDate', operator: 'between', value: ['2023-01-01', '2023-03-31'] }],
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
  ]);

  const filterFields = [
    { value: 'name', label: 'Name' },
    { value: 'createdDate', label: 'Created Date' },
    { value: 'status', label: 'Status' },
    { value: 'amount', label: 'Amount' }
  ];

  const removeFilter = (index: number) => {
    setActiveFilters(activeFilters.filter((_, i) => i !== index));
  };

  const clearAllFilters = () => {
    setActiveFilters([]);
  };

  const addFilter = () => {
    setActiveFilters([...activeFilters, {
      field: '',
      operator: 'equals',
      value: '',
    }]);
  };

  const handleLogicalOperatorChange = (index: number, value: LogicalOperator) => {
    const newFilters = [...activeFilters];
    if (newFilters[index]) {
      newFilters[index] = {
        ...newFilters[index],
        logicalOperator: value
      };
      setActiveFilters(newFilters);
    }
  };

  const handleFieldChange = (index: number, value: string) => {
    const newFilters = [...activeFilters];
    if (newFilters[index]) {
      newFilters[index] = { ...newFilters[index], field: value };
      setActiveFilters(newFilters);
    }
  };

  const handleOperatorChange = (index: number, value: FilterOperator) => {
    const newFilters = [...activeFilters];
    if (newFilters[index]) {
      newFilters[index] = { ...newFilters[index], operator: value };
      setActiveFilters(newFilters);
    }
  };

  const handleValueChange = (index: number, value: string) => {
    const newFilters = [...activeFilters];
    if (newFilters[index]) {
      newFilters[index] = { ...newFilters[index], value };
      setActiveFilters(newFilters);
    }
  };

  const handleSaveFilter = () => {
    const name = prompt('Enter a name for this filter:');
    if (!name) return;

    const now = new Date().toISOString();
    const newFilter: SavedFilter = {
      id: Date.now().toString(),
      name,
      filters: activeFilters,
      isDefault: false,
      createdAt: now,
      updatedAt: now
    };
    
    setSavedFilters([...savedFilters, newFilter]);
    alert('Filter saved successfully!');
  };

  const handleToggleStar = (filter: SavedFilter) => {
    setSavedFilters(savedFilters.map(f => 
      f.id === filter.id ? { ...f, isDefault: !f.isDefault } : f
    ));
  };

  const handleDeleteSavedFilter = (id: string) => {
    setSavedFilters(savedFilters.filter(f => f.id !== id));
  };

  const applyFilter = (filter: SavedFilter) => {
    setActiveFilters(filter.filters);
    setIsOpen(false);
  };

  // Generate a display string for a filter
  const getFilterDisplay = (filter: FilterType): string => {
    const field = filterFields?.find(f => f.value === filter.field)?.label || filter.field;
    
    let operatorText = '';
    switch (filter.operator) {
      case 'equals': operatorText = 'is'; break;
      case 'contains': operatorText = 'contains'; break;
      case 'in': operatorText = 'is one of'; break;
      case 'between': operatorText = 'is between'; break;
      case 'greaterThan': operatorText = 'is greater than'; break;
      case 'lessThan': operatorText = 'is less than'; break;
      default: operatorText = filter.operator;
    }
    
    let valueText = '';
    if (Array.isArray(filter.value)) {
      valueText = filter.value.join(', ');
    } else {
      valueText = filter.value;
    }
    
    return `${field} ${operatorText} ${valueText}`;
  };

  const getJsonView = () => {
    return JSON.stringify({
      conditions: activeFilters.map(filter => ({
        field: filter.field,
        operator: filter.operator,
        value: filter.value
      })),
      logicalOperator: "AND"
    }, null, 2);
  };

  return (
    <div className="w-full space-y-4">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold">Orders List</h2>
        
        <div className="flex items-center space-x-2">
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" className="h-8 px-2 lg:px-3">
                <span>Saved Filters</span>
                <ChevronDown className="ml-2 h-4 w-4" />
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-72">
              <div className="space-y-2">
                <h3 className="font-medium">Saved Filters</h3>
                <div className="space-y-1">
                  {savedFilters.length === 0 && (
                    <p className="text-sm text-muted-foreground">No saved filters yet</p>
                  )}
                  {savedFilters.map((filter) => (
                    <div key={filter.id} className="flex items-center justify-between rounded-md px-2 py-1 hover:bg-gray-100">
                      <div className="flex items-center gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => handleToggleStar(filter)}
                          className="h-6 w-6"
                        >
                          <Star className={`h-4 w-4 ${filter.isDefault ? 'fill-yellow-400 text-yellow-400' : ''}`} />
                        </Button>
                        <span className="text-sm">{filter.name}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => applyFilter(filter)}
                          className="h-6 w-6"
                        >
                          <Filter className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => handleDeleteSavedFilter(filter.id)}
                          className="h-6 w-6"
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </PopoverContent>
          </Popover>
          
          <Sheet open={isOpen} onOpenChange={setIsOpen}>
            <SheetTrigger asChild>
              <Button className="h-8">
                <Filter className="mr-2 h-4 w-4" />
                <span>Add Filter</span>
              </Button>
            </SheetTrigger>
            <SheetContent className="sm:max-w-md">
              <SheetHeader>
                <SheetTitle>Advanced Filter</SheetTitle>
                <SheetDescription>
                  Create complex filters to find exactly what you need.
                </SheetDescription>
              </SheetHeader>
              
              <Tabs defaultValue="build" className="mt-4" value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="grid w-full grid-cols-2">
                  <TabsTrigger value="build">Build</TabsTrigger>
                  <TabsTrigger value="json">JSON</TabsTrigger>
                </TabsList>
                
                <TabsContent value="build" className="space-y-4 py-4">
                  <ScrollArea className="h-[300px] pr-4">
                    <div className="space-y-4">
                      {activeFilters.map((filter, index) => (
                        <div key={index} className="space-y-2">
                          {index > 0 && (
                            <Select
                              value={filter.logicalOperator || 'AND'}
                              onValueChange={(value) => handleLogicalOperatorChange(index, value as LogicalOperator)}
                            >
                              <SelectTrigger className="w-20">
                                <SelectValue />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="AND">AND</SelectItem>
                                <SelectItem value="OR">OR</SelectItem>
                              </SelectContent>
                            </Select>
                          )}
                          
                          <div className="grid grid-cols-12 gap-2">
                            <div className="col-span-5">
                              <Select
                                value={filter.field}
                                onValueChange={(value) => handleFieldChange(index, value)}
                              >
                                <SelectTrigger>
                                  <SelectValue placeholder="Select field" />
                                </SelectTrigger>
                                <SelectContent>
                                  {filterFields.map((field) => (
                                    <SelectItem key={field.value} value={field.value}>
                                      {field.label}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </div>
                            
                            <div className="col-span-3">
                              <Select
                                value={filter.operator}
                                onValueChange={(value) => handleOperatorChange(index, value as FilterOperator)}
                              >
                                <SelectTrigger>
                                  <SelectValue placeholder="Operator" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="equals">Equals</SelectItem>
                                  <SelectItem value="contains">Contains</SelectItem>
                                  <SelectItem value="in">In</SelectItem>
                                  <SelectItem value="between">Between</SelectItem>
                                  <SelectItem value="greaterThan">Greater than</SelectItem>
                                  <SelectItem value="lessThan">Less than</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>
                            
                            <div className="col-span-3">
                              <Input
                                placeholder="Value"
                                value={typeof filter.value === 'string' ? filter.value : Array.isArray(filter.value) ? filter.value.join(', ') : filter.value}
                                onChange={(e) => handleValueChange(index, e.target.value)}
                              />
                            </div>
                            
                            <div className="col-span-1 flex items-center justify-center">
                              <Button
                                variant="ghost"
                                size="icon"
                                onClick={() => removeFilter(index)}
                                className="h-8 w-8"
                              >
                                <X className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                        </div>
                      ))}
                      
                      <Button variant="outline" size="sm" onClick={addFilter}>
                        <Plus className="h-4 w-4 mr-1" />
                        Add Condition
                      </Button>
                    </div>
                  </ScrollArea>
                </TabsContent>
                
                <TabsContent value="json" className="py-4">
                  <div className="bg-gray-100 p-3 rounded-md font-mono text-sm overflow-auto max-h-[300px]">
                    {getJsonView()}
                  </div>
                </TabsContent>
              </Tabs>
              
              <div className="mt-6 flex justify-between items-center">
                <div className="flex space-x-2">
                  <Button variant="outline" size="sm">
                    <History className="h-4 w-4 mr-1" />
                    History
                  </Button>
                  <Button size="sm" variant="outline">
                    <Code className="h-4 w-4 mr-1" />
                    Test
                  </Button>
                </div>
                <div className="space-x-2">
                  <Button variant="outline" onClick={() => setIsOpen(false)}>Cancel</Button>
                  <Button onClick={() => setIsOpen(false)}>Apply</Button>
                </div>
              </div>
              
              <div className="mt-4 border-t pt-4">
                <div className="flex justify-between items-center">
                  <h3 className="text-sm font-medium">Save this filter</h3>
                  <Button size="sm" variant="outline" onClick={handleSaveFilter}>
                    <Save className="h-4 w-4 mr-1" />
                    Save
                  </Button>
                </div>
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </div>
      
      {/* Active filters */}
      {activeFilters.length > 0 && (
        <div className="flex flex-wrap gap-2 items-center py-2">
          <span className="text-sm font-medium text-gray-500">Active filters:</span>
          {activeFilters.map((filter, index) => (
            <Badge key={index} variant="outline" className="flex items-center gap-1 px-2 py-1">
              {getFilterDisplay(filter)}
              <button onClick={() => removeFilter(index)} className="ml-1 rounded-full hover:bg-gray-200">
                <X className="h-3 w-3" />
              </button>
            </Badge>
          ))}
          <Button variant="ghost" size="sm" className="text-xs h-7" onClick={clearAllFilters}>
            Clear all
          </Button>
        </div>
      )}
      
      {/* Results count */}
      <div className="text-sm text-gray-500">
        Showing 1-50 of 1,250 filtered results (from 1,000,000 total)
      </div>
      
      {/* Table placeholder */}
      <Card>
        <CardHeader className="pb-2">
          <CardTitle>Orders</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-60 flex items-center justify-center border rounded-md bg-gray-50">
            <p className="text-gray-400">Table content would appear here</p>
          </div>
        </CardContent>
        <CardFooter className="flex justify-between">
          <Button variant="outline" size="sm">Export Filtered Results</Button>
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm">Previous</Button>
            <Button variant="outline" size="sm">Next</Button>
          </div>
        </CardFooter>
      </Card>
    </div>
  );
};

export default AdvancedFilterMockup;