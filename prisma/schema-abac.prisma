// ABAC (Attribute-Based Access Control) Permission Management Schema
// This schema extends the Carmen ERP system with comprehensive ABAC functionality
// Based on ADR-003: Attribute-Based Access Control Permission System

generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prismaTypesGenerator {
  provider    = "prisma-types-generator"
  modelSuffix = "Model"
  prettier    = "true"
}

generator json {
  provider = "prisma-json-types-generator"
}

// =============================================================================
// ABAC CORE ENUMS
// =============================================================================

enum PolicyEffect {
  PERMIT
  DENY
}

enum PolicyStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum CombiningAlgorithm {
  DENY_OVERRIDES
  PERMIT_OVERRIDES
  FIRST_APPLICABLE
  ONLY_ONE_APPLICABLE
}

enum ExpressionOperator {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  GREATER_THAN_OR_EQUAL
  LESS_THAN
  LESS_THAN_OR_EQUAL
  CONTAINS
  NOT_CONTAINS
  STARTS_WITH
  ENDS_WITH
  MATCHES_REGEX
  IN
  NOT_IN
}

enum LogicalOperator {
  AND
  OR
  NOT
}

enum ExpressionType {
  SIMPLE
  COMPOSITE
}

enum AttributeDataType {
  STRING
  NUMBER
  BOOLEAN
  DATE
  DATETIME
  ARRAY
  OBJECT
}

enum ResourceType {
  // Procurement Resources
  PURCHASE_REQUEST
  PURCHASE_ORDER
  GOODS_RECEIPT_NOTE
  CREDIT_NOTE
  VENDOR_QUOTATION
  PURCHASE_REQUEST_TEMPLATE
  
  // Inventory Resources
  INVENTORY_ITEM
  STOCK_COUNT
  STOCK_ADJUSTMENT
  STOCK_TRANSFER
  PHYSICAL_COUNT
  SPOT_CHECK
  WASTAGE_REPORT
  FRACTIONAL_INVENTORY
  
  // Vendor Resources
  VENDOR
  VENDOR_PRICE_LIST
  VENDOR_CONTRACT
  VENDOR_CAMPAIGN
  VENDOR_TEMPLATE
  VENDOR_PORTAL
  
  // Product Resources
  PRODUCT
  PRODUCT_CATEGORY
  PRODUCT_SPECIFICATION
  PRODUCT_UNIT
  
  // Recipe Resources
  RECIPE
  RECIPE_VARIANT
  RECIPE_CATEGORY
  CUISINE_TYPE
  MENU_ITEM
  
  // Financial Resources
  INVOICE
  PAYMENT
  BUDGET
  JOURNAL_ENTRY
  ACCOUNT_CODE
  EXCHANGE_RATE
  DEPARTMENT_BUDGET
  
  // Operations Resources
  STORE_REQUISITION
  PRODUCTION_ORDER
  BATCH_PRODUCTION
  QUALITY_CONTROL
  
  // System Resources
  USER
  ROLE
  WORKFLOW
  REPORT
  CONFIGURATION
  LOCATION
  DEPARTMENT
  NOTIFICATION
  POLICY
  PERMISSION
}

enum StandardAction {
  VIEW
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  SUBMIT
  RECALL
  ARCHIVE
  RESTORE
  EXPORT
  IMPORT
  PRINT
  EMAIL
  COPY
  ASSIGN
  TRANSFER
  CALCULATE
  PROCESS
  VALIDATE
  AUDIT
}

enum SubscriptionPackage {
  BASIC
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}

enum AccessDecisionStatus {
  PERMIT
  DENY
  NOT_APPLICABLE
  INDETERMINATE
}

// =============================================================================
// ABAC CORE MODELS
// =============================================================================

// Policy Definition
model Policy {
  id                String        @id @default(cuid())
  name              String        @unique
  description       String?
  version           String        @default("1.0")
  priority          Int           @default(500) // 0-1000, higher = evaluated first
  effect            PolicyEffect
  status            PolicyStatus  @default(DRAFT)
  combiningAlgorithm CombiningAlgorithm @default(DENY_OVERRIDES)
  
  // Policy Target - defines when this policy applies
  target            Json          // PolicyTarget object
  
  // Rules that must be met for this policy to apply
  rules             PolicyRule[]
  
  // Additional requirements when policy is applied
  obligations       PolicyObligation[]
  
  // Advisory information
  advice            PolicyAdvice[]
  
  // Metadata
  createdBy         String
  updatedBy         String
  validFrom         DateTime?
  validTo           DateTime?
  tags              String[]      @default([])
  metadata          Json?
  
  // Audit fields
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relationships
  assignedRoles     RolePolicyAssignment[]
  evaluationLogs    PolicyEvaluationLog[]
  testResults       PolicyTestResult[]
  
  @@map("abac_policies")
  @@index([priority, status])
  @@index([effect, status])
  @@index([status, validFrom, validTo])
}

// Policy Rule
model PolicyRule {
  id          String   @id @default(cuid())
  policyId    String
  name        String
  description String?
  priority    Int      @default(100)
  
  // Rule conditions
  condition   Expression @relation(fields: [conditionId], references: [id])
  conditionId String   @unique
  
  // Rule metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  policy      Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  @@map("abac_policy_rules")
  @@index([policyId, priority])
}

// Expression for rule conditions
model Expression {
  id                String            @id @default(cuid())
  type              ExpressionType
  
  // Simple expression fields
  attribute         String?           // e.g., 'subject.department.name'
  operator          ExpressionOperator?
  value             Json?             // comparison value
  dataType          AttributeDataType?
  
  // Composite expression fields
  logicalOperator   LogicalOperator?
  
  // Self-referential relationships for composite expressions
  parentId          String?
  parent            Expression?       @relation("ExpressionHierarchy", fields: [parentId], references: [id])
  children          Expression[]      @relation("ExpressionHierarchy")
  
  // Relationships
  policyRule        PolicyRule?
  
  // Metadata
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@map("abac_expressions")
  @@index([type, attribute])
  @@index([parentId])
}

// Policy Obligations
model PolicyObligation {
  id          String   @id @default(cuid())
  policyId    String
  type        String   // e.g., 'LOG_ACCESS', 'NOTIFY_MANAGER', 'REQUIRE_APPROVAL'
  description String
  parameters  Json?    // obligation-specific parameters
  
  // Relationships
  policy      Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("abac_policy_obligations")
  @@index([policyId])
}

// Policy Advice
model PolicyAdvice {
  id          String   @id @default(cuid())
  policyId    String
  type        String   // e.g., 'WARNING', 'RECOMMENDATION', 'INFORMATION'
  message     String
  parameters  Json?    // advice-specific parameters
  
  // Relationships
  policy      Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("abac_policy_advice")
  @@index([policyId])
}

// =============================================================================
// ROLE AND SUBJECT MANAGEMENT
// =============================================================================

// Enhanced Role model for ABAC
model Role {
  id                String   @id @default(cuid())
  name              String   @unique
  displayName       String
  description       String?
  
  // Role hierarchy
  parentId          String?
  parent            Role?    @relation("RoleHierarchy", fields: [parentId], references: [id])
  children          Role[]   @relation("RoleHierarchy")
  level             Int      @default(0)
  path              String   // Hierarchical path like "/admin/manager/supervisor"
  
  // Role attributes for ABAC
  attributes        Json     @default("{}")  // RoleAttributes object
  permissions       String[] @default([])    // Base permissions
  clearanceLevel    String?
  approvalLimit     Decimal?
  
  // Metadata
  isSystemRole      Boolean  @default(false)
  isActive          Boolean  @default(true)
  priority          Int      @default(0)
  color             String?  // UI color code
  icon              String?  // UI icon name
  
  // Audit fields
  createdBy         String
  updatedBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  users             UserRole[]
  policyAssignments RolePolicyAssignment[]
  
  @@map("abac_roles")
  @@index([parentId, level])
  @@index([isActive, isSystemRole])
  @@index([path])
}

// User-Role Assignment with context
model UserRole {
  id              String    @id @default(cuid())
  userId          String
  roleId          String
  
  // Contextual assignment
  isPrimary       Boolean   @default(false)
  departmentId    String?   // Scoped to specific department
  locationId      String?   // Scoped to specific location
  
  // Temporal constraints
  effectiveFrom   DateTime?
  effectiveTo     DateTime?
  
  // Assignment metadata
  assignedBy      String
  assignedAt      DateTime  @default(now())
  reason          String?
  
  // Relationships
  role            Role      @relation(fields: [roleId], references: [id])
  
  @@unique([userId, roleId, departmentId, locationId])
  @@map("abac_user_roles")
  @@index([userId, isPrimary])
  @@index([effectiveFrom, effectiveTo])
}

// Role-Policy Assignment
model RolePolicyAssignment {
  id          String   @id @default(cuid())
  roleId      String
  policyId    String
  
  // Assignment context
  priority    Int      @default(100)
  isInherited Boolean  @default(false) // Inherited from parent role
  
  // Temporal constraints
  effectiveFrom DateTime?
  effectiveTo   DateTime?
  
  // Metadata
  assignedBy  String
  assignedAt  DateTime @default(now())
  reason      String?
  
  // Relationships
  role        Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  policy      Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, policyId])
  @@map("abac_role_policy_assignments")
  @@index([roleId, priority])
  @@index([policyId])
}

// =============================================================================
// SUBJECT ATTRIBUTES
// =============================================================================

// Dynamic subject attributes for users
model SubjectAttribute {
  id              String            @id @default(cuid())
  userId          String
  
  // Attribute definition
  name            String            // e.g., 'department', 'clearanceLevel', 'shift'
  value           Json              // attribute value
  dataType        AttributeDataType
  
  // Context and scope
  context         String?           // e.g., 'work', 'training', 'emergency'
  departmentId    String?
  locationId      String?
  
  // Temporal validity
  effectiveFrom   DateTime?
  effectiveTo     DateTime?
  
  // Source and metadata
  source          String            @default("manual") // 'manual', 'system', 'import', 'ldap'
  confidence      Float             @default(1.0)     // 0.0 to 1.0
  metadata        Json?
  
  // Audit fields
  createdBy       String
  updatedBy       String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([userId, name, context, departmentId, locationId])
  @@map("abac_subject_attributes")
  @@index([userId, name])
  @@index([name, value])
  @@index([effectiveFrom, effectiveTo])
}

// =============================================================================
// RESOURCE ATTRIBUTES
// =============================================================================

// Dynamic resource attributes
model ResourceAttribute {
  id              String            @id @default(cuid())
  resourceType    ResourceType
  resourceId      String
  
  // Attribute definition
  name            String            // e.g., 'classification', 'value', 'owner'
  value           Json              // attribute value
  dataType        AttributeDataType
  
  // Classification and security
  classification  String?           // e.g., 'public', 'internal', 'confidential', 'restricted'
  sensitivity     String?           // e.g., 'low', 'medium', 'high', 'critical'
  
  // Ownership and context
  ownerId         String?
  departmentId    String?
  locationId      String?
  
  // Temporal validity
  effectiveFrom   DateTime?
  effectiveTo     DateTime?
  
  // Source and metadata
  source          String            @default("system") // 'system', 'manual', 'computed'
  confidence      Float             @default(1.0)
  metadata        Json?
  
  // Audit fields
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([resourceType, resourceId, name])
  @@map("abac_resource_attributes")
  @@index([resourceType, resourceId])
  @@index([name, value])
  @@index([classification, sensitivity])
  @@index([ownerId])
}

// =============================================================================
// ENVIRONMENT ATTRIBUTES
// =============================================================================

// Environment context for policy evaluation
model EnvironmentAttribute {
  id              String            @id @default(cuid())
  
  // Attribute definition
  name            String            // e.g., 'time', 'location', 'networkZone', 'threatLevel'
  value           Json              // attribute value
  dataType        AttributeDataType
  
  // Scope and applicability
  scope           String            @default("global") // 'global', 'location', 'department'
  locationId      String?
  departmentId    String?
  
  // Temporal validity
  effectiveFrom   DateTime?
  effectiveTo     DateTime?
  
  // Source and metadata
  source          String            @default("system") // 'system', 'sensor', 'manual', 'api'
  updateFrequency String?           // 'realtime', 'hourly', 'daily', 'static'
  metadata        Json?
  
  // Audit fields
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@unique([name, scope, locationId, departmentId])
  @@map("abac_environment_attributes")
  @@index([name, value])
  @@index([scope, locationId, departmentId])
  @@index([effectiveFrom, effectiveTo])
}

// =============================================================================
// ACCESS CONTROL AND EVALUATION
// =============================================================================

// Access Request for policy evaluation
model AccessRequest {
  id                String            @id @default(cuid())
  
  // Subject information
  userId            String
  subjectAttributes Json              // SubjectAttributes object
  
  // Resource information
  resourceType      ResourceType
  resourceId        String?
  resourceAttributes Json             // ResourceAttributes object
  
  // Action information
  action            StandardAction
  actionAttributes  Json?             // Additional action-specific attributes
  
  // Environment context
  environmentAttributes Json          // EnvironmentAttributes object
  
  // Request metadata
  requestId         String            @unique // External request tracking ID
  sessionId         String?
  ipAddress         String?
  userAgent         String?
  
  // Evaluation context
  evaluationEngine  String            @default("policy-engine-v1")
  evaluationTime    DateTime          @default(now())
  processingTime    Int?              // milliseconds
  
  // Decision
  decision          AccessDecisionStatus
  applicablePolicies Json             // Array of applicable policy IDs
  obligations       Json?             // Array of obligations to fulfill
  advice            Json?             // Array of advice/recommendations
  
  // Error handling
  errorCode         String?
  errorMessage      String?
  
  // Audit fields
  createdAt         DateTime          @default(now())
  
  // Relationships
  evaluationLogs    PolicyEvaluationLog[]
  
  @@map("abac_access_requests")
  @@index([userId, resourceType])
  @@index([requestId])
  @@index([evaluationTime])
  @@index([decision])
}

// Policy Evaluation Log
model PolicyEvaluationLog {
  id              String            @id @default(cuid())
  accessRequestId String
  policyId        String
  
  // Evaluation details
  ruleResults     Json              // Array of rule evaluation results
  finalDecision   AccessDecisionStatus
  evaluationTime  Int               // milliseconds
  
  // Debug information
  debugInfo       Json?             // Detailed evaluation trace
  
  // Audit fields
  createdAt       DateTime          @default(now())
  
  // Relationships
  accessRequest   AccessRequest     @relation(fields: [accessRequestId], references: [id], onDelete: Cascade)
  policy          Policy            @relation(fields: [policyId], references: [id])
  
  @@map("abac_policy_evaluation_logs")
  @@index([accessRequestId])
  @@index([policyId, finalDecision])
  @@index([createdAt])
}

// =============================================================================
// SUBSCRIPTION AND PACKAGE MANAGEMENT
// =============================================================================

// Subscription package configuration
model SubscriptionConfig {
  id                    String              @id @default(cuid())
  organizationId        String              @unique
  
  // Package information
  packageType           SubscriptionPackage
  packageName           String
  packageDescription    String?
  
  // Limits and quotas
  maxUsers              Int?
  maxLocations          Int?
  maxDepartments        Int?
  maxPolicies           Int?
  maxRoles              Int?
  
  // Feature enablement
  enabledResources      ResourceType[]      @default([])
  enabledModules        String[]            @default([])
  customFeatures        Json?               // Custom feature configuration
  
  // Usage tracking
  currentUsers          Int                 @default(0)
  currentLocations      Int                 @default(0)
  currentPolicies       Int                 @default(0)
  
  // Subscription metadata
  subscriptionStart     DateTime
  subscriptionEnd       DateTime?
  isActive              Boolean             @default(true)
  
  // Billing and contact
  billingContact        String?
  technicalContact      String?
  
  // Audit fields
  createdBy             String
  updatedBy             String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  @@map("abac_subscription_configs")
  @@index([organizationId, isActive])
  @@index([packageType])
}

// =============================================================================
// POLICY TESTING AND VALIDATION
// =============================================================================

// Policy test scenarios
model PolicyTestScenario {
  id                String   @id @default(cuid())
  name              String
  description       String?
  
  // Test data
  subjectAttributes Json     // Test subject attributes
  resourceAttributes Json    // Test resource attributes
  environmentAttributes Json // Test environment attributes
  action            StandardAction
  
  // Expected result
  expectedDecision  AccessDecisionStatus
  expectedObligations Json?
  expectedAdvice    Json?
  
  // Test metadata
  category          String?  // e.g., 'smoke', 'regression', 'edge-case'
  tags              String[] @default([])
  
  // Audit fields
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  testResults       PolicyTestResult[]
  
  @@map("abac_policy_test_scenarios")
  @@index([category])
  @@index([createdBy])
}

// Policy test results
model PolicyTestResult {
  id              String                @id @default(cuid())
  scenarioId      String
  policyId        String
  
  // Test execution
  testRunId       String                // Groups multiple tests together
  executedAt      DateTime              @default(now())
  executedBy      String
  
  // Results
  actualDecision  AccessDecisionStatus
  actualObligations Json?
  actualAdvice    Json?
  
  // Test outcome
  passed          Boolean
  errorMessage    String?
  executionTime   Int                   // milliseconds
  
  // Relationships
  scenario        PolicyTestScenario    @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  policy          Policy                @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  @@map("abac_policy_test_results")
  @@index([testRunId])
  @@index([scenarioId, policyId])
  @@index([passed, executedAt])
}

// =============================================================================
// PERFORMANCE AND ANALYTICS
// =============================================================================

// Policy performance metrics
model PolicyPerformanceMetric {
  id                    String   @id @default(cuid())
  policyId              String
  
  // Time period
  metricDate            DateTime
  periodType            String   @default("daily") // 'hourly', 'daily', 'weekly', 'monthly'
  
  // Performance metrics
  evaluationCount       Int      @default(0)
  averageEvaluationTime Int      @default(0) // milliseconds
  maxEvaluationTime     Int      @default(0)
  minEvaluationTime     Int      @default(0)
  
  // Decision metrics
  permitCount           Int      @default(0)
  denyCount             Int      @default(0)
  errorCount            Int      @default(0)
  
  // Cache metrics
  cacheHitRate          Float    @default(0.0) // 0.0 to 1.0
  cacheSize             Int      @default(0)
  
  // Relationships
  policy                Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  @@unique([policyId, metricDate, periodType])
  @@map("abac_policy_performance_metrics")
  @@index([metricDate, periodType])
  @@index([policyId])
}

// User access analytics
model UserAccessAnalytic {
  id                  String            @id @default(cuid())
  userId              String
  
  // Time period
  analyticDate        DateTime
  periodType          String            @default("daily")
  
  // Access metrics
  totalRequests       Int               @default(0)
  approvedRequests    Int               @default(0)
  deniedRequests      Int               @default(0)
  errorRequests       Int               @default(0)
  
  // Resource access breakdown
  resourceAccess      Json              // Map of resource types to access counts
  actionBreakdown     Json              // Map of actions to counts
  
  // Performance metrics
  averageResponseTime Int               @default(0) // milliseconds
  
  @@unique([userId, analyticDate, periodType])
  @@map("abac_user_access_analytics")
  @@index([userId, analyticDate])
  @@index([analyticDate, periodType])
}

// =============================================================================
// AUDIT AND COMPLIANCE
// =============================================================================

// Comprehensive audit log
model AuditLog {
  id                String   @id @default(cuid())
  
  // Event information
  eventType         String   // e.g., 'POLICY_CREATED', 'ACCESS_GRANTED', 'ROLE_ASSIGNED'
  eventCategory     String   // e.g., 'POLICY', 'ACCESS', 'ROLE', 'USER', 'SYSTEM'
  action            String   // Specific action performed
  
  // Actor information
  userId            String?  // User who performed the action
  sessionId         String?
  ipAddress         String?
  userAgent         String?
  
  // Resource information
  resourceType      String?
  resourceId        String?
  resourceName      String?
  
  // Change details
  oldValues         Json?    // Previous values (for updates)
  newValues         Json?    // New values (for creates/updates)
  changeDetails     Json?    // Additional change information
  
  // Context
  requestId         String?  // Related access request ID
  businessContext   String?  // Business justification
  
  // Result
  success           Boolean  @default(true)
  errorCode         String?
  errorMessage      String?
  
  // Compliance
  complianceFlags   String[] @default([]) // e.g., ['GDPR', 'HIPAA', 'SOX']
  retentionDate     DateTime?              // When this log can be purged
  
  // Audit metadata
  timestamp         DateTime @default(now())
  source            String   @default("system") // 'system', 'api', 'ui', 'batch'
  
  @@map("abac_audit_logs")
  @@index([eventType, eventCategory])
  @@index([userId, timestamp])
  @@index([resourceType, resourceId])
  @@index([timestamp])
  @@index([requestId])
}

// =============================================================================
// CACHE AND OPTIMIZATION
// =============================================================================

// Permission cache for performance optimization
model PermissionCache {
  id                String   @id @default(cuid())
  
  // Cache key components
  userId            String
  resourceType      ResourceType
  resourceId        String?
  action            StandardAction
  contextHash       String   // Hash of subject/resource/environment attributes
  
  // Cached decision
  decision          AccessDecisionStatus
  obligations       Json?
  advice            Json?
  
  // Cache metadata
  createdAt         DateTime @default(now())
  expiresAt         DateTime
  hitCount          Int      @default(0)
  lastAccessed      DateTime @default(now())
  
  // Cache source
  sourceRequestId   String?  // Original access request ID
  policyVersion     String   // Policy version when cached
  
  @@unique([userId, resourceType, resourceId, action, contextHash])
  @@map("abac_permission_cache")
  @@index([userId, expiresAt])
  @@index([expiresAt]) // For cache cleanup
  @@index([lastAccessed]) // For LRU eviction
}

// =============================================================================
// MIGRATION AND COMPATIBILITY
// =============================================================================

// Policy migration tracking
model PolicyMigration {
  id                String   @id @default(cuid())
  migrationName     String   @unique
  description       String
  
  // Migration details
  fromVersion       String
  toVersion         String
  migrationType     String   // e.g., 'SCHEMA', 'DATA', 'POLICY'
  
  // Execution
  executedAt        DateTime?
  executedBy        String?
  success           Boolean  @default(false)
  
  // Migration data
  affectedPolicies  String[] @default([])
  migrationData     Json?
  errorLog          String?
  rollbackData      Json?
  
  // Audit fields
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("abac_policy_migrations")
  @@index([migrationName, success])
}

// =============================================================================
// INDEXES FOR PERFORMANCE
// =============================================================================

// Additional indexes are defined inline with each model above.
// Key performance considerations:
// 1. Policy evaluation queries (priority, status, effect)
// 2. User permission lookups (userId, resourceType, action)
// 3. Audit log queries (timestamp, userId, eventType)
// 4. Cache lookups (userId, contextHash, expiresAt)
// 5. Attribute queries (name, value, effectivity dates)